{"version":3,"sources":["components/App.jsx","index.js"],"names":["App","_useState","useState","fName","lName","email","_useState2","_slicedToArray","contact","setContact","handleChange","event","_event$target","target","name","value","console","log","preValue","React","createElement","className","onChange","placeholder","ReactDOM","render","document","getElementById"],"mappings":"2MA4EeA,MA1Ef,WAEE,IAAAC,EAA8BC,mBAAS,CACrCC,MAAO,GACPC,MAAO,GACPC,MAAO,KACPC,EAAAC,YAAAN,EAAA,GAJKO,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAQ1B,SAASI,EAAaC,GAIpB,IAAAC,EAAwBD,EAAME,OAAtBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACdC,QAAQC,IAAI,CAAEH,OAAMC,UAEpBN,GAAW,SAACS,GAGV,MAAa,UAATJ,EACK,CACLX,MAAOY,EACPX,MAAOc,EAASd,MAChBC,MAAOa,EAASb,OAEA,UAATS,EACF,CACLX,MAAOe,EAASf,MAChBC,MAAOW,EACPV,MAAOa,EAASb,OAEA,UAATS,EACF,CACLX,MAAOe,EAASf,MAChBC,MAAOc,EAASd,MAChBC,MAAOU,QAJJ,KAWX,OACEI,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,UAAI,SACKZ,EAAQL,MAAM,IAAEK,EAAQJ,OAEjCe,IAAAC,cAAA,SAAIZ,EAAQH,OACZc,IAAAC,cAAA,YACED,IAAAC,cAAA,SACEE,SAAUZ,EACVK,MAAOP,EAAQL,MACfW,KAAK,QACLS,YAAY,eAEdJ,IAAAC,cAAA,SACEE,SAAUZ,EACVK,MAAOP,EAAQJ,MACfU,KAAK,QACLS,YAAY,cAEdJ,IAAAC,cAAA,SACEE,SAAUZ,EACVK,MAAOP,EAAQH,MACfS,KAAK,QACLS,YAAY,UAEdJ,IAAAC,cAAA,cAAQ,aClEhBI,IAASC,OAAON,IAAAC,cAACpB,EAAG,MAAK0B,SAASC,eAAe,U","file":"static/js/main.b38c7f8b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  // #1 Destructing useState\n  const [contact, setContact] = useState({\n    fName: \"\",\n    lName: \"\",\n    email: \"\"\n  });\n\n  // #3 Destrucing preValue to capture previous event\n  // pass the event to handle in this function\n  function handleChange(event) {\n    // const name = event.target.name\n    // const value = event.target.value\n\n    const { name, value } = event.target;\n    console.log({ name, value });\n\n    setContact((preValue) => {\n      //console.log(preValue);\n      // preValue is actually holding previous object (fName, lName, email)\n      if (name === \"fName\") {\n        return {\n          fName: value,\n          lName: preValue.lName,\n          email: preValue.email\n        };\n      } else if (name === \"lName\") {\n        return {\n          fName: preValue.fName,\n          lName: value,\n          email: preValue.email\n        };\n      } else if (name === \"email\") {\n        return {\n          fName: preValue.fName,\n          lName: preValue.lName,\n          email: value\n        };\n      }\n    });\n  }\n\n  // #2 Adding handleChange to capture state/value and set state/value for these fields\n  return (\n    <div className=\"container\">\n      <h1>\n        Hello {contact.fName} {contact.lName}\n      </h1>\n      <p>{contact.email}</p>\n      <form>\n        <input\n          onChange={handleChange}\n          value={contact.fName}\n          name=\"fName\"\n          placeholder=\"First Name\"\n        />\n        <input\n          onChange={handleChange}\n          value={contact.lName}\n          name=\"lName\"\n          placeholder=\"Last Name\"\n        />\n        <input\n          onChange={handleChange}\n          value={contact.email}\n          name=\"email\"\n          placeholder=\"Email\"\n        />\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: Make the code in App.jsx work.\n//The final app should have a single contact\n//with fName, lName and email.\n\n//HINT: You'll need to apply the following things you learnt:\n//1. Using JS Objects with state.\n//2. Making use of previous state when changing state.\n//3. Working with forms in React.\n//4. Handing events\n"],"sourceRoot":""}